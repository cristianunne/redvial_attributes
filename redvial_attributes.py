# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RedVialAttributes
                                 A QGIS plugin
 Cambia los atributos
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Cristian Da Silva
        email                : cristian297@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .redvial_attributes_dialog import RedVialAttributesDialog
import os.path

from .modifiedatributetool import ModifiedAtributeTool
from .HistorySegmentTool import HistorySegmentTool
from .CreateRedVialTool import CreateRedVialTool


class RedVialAttributes:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RedVialAttributes_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'RedVialAttributes')
        self.toolbar.setObjectName(u'RedVialAttributes')




    def initGui(self):

        self.modified_attr_tool = ModifiedAtributeTool(self.iface, self.toolbar)

        self.history_tool = HistorySegmentTool(self.iface, self.toolbar)

        self.created_red_tool = CreateRedVialTool(self.iface, self.toolbar)
        self.toolbar.addSeparator()



    def unload(self):

        pass
        #self.iface.removeToolBarIcon(self.md_attr)
